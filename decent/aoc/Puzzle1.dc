(load-file "../src/Base.dc")
(load-file "./Puzzles.dc")

(def! input (read-puzzle 1))
(def! readings
  (let (
    lines (split input "\n")
    not-empty? (fn (s) (not (empty? s)))
    )
  (map string-to-int (filter not-empty? lines))
  )
)

(defn make-pairs (l)
  (if (< (count l) 2)
    ()
    (let (
      p1 (head l)
      rest (drop l 1)
      p2 (head rest)
      pair `(,p1 ,p2)
    ) (cons pair (make-pairs rest))
    )
  )
)

(defn is-increasing (pair)
  (> (nth pair 1) (nth pair 0))
)

(defn count-increasing (p)
  (count (filter is-increasing p))
)

(print "Part A:")
(print (count-increasing (make-pairs readings)))

(defn make-trips (l)
  (if (< (count l) 3)
    ()
    (let (
      p1 (nth l 0)
      p2 (nth l 1)
      p3 (nth l 2)
      rest (drop l 1)
    ) (cons (+ p1 (+ p2 p3)) (make-trips rest))
    )
  )
)
(def! trips (make-trips readings))

(print "Part B:")
(print (count-increasing (make-pairs trips)))
