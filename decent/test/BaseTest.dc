(load-file "../src/Base.dc")
(load-file "./TestUtils.dc")

;; Tests for the Base standard library

; Basic equality assertions
(assert-equal 1 1)
(assert-equal () ())
(assert-equal "hello" "hello")
(assert-not-equal 1 2)

; Boolean logic assertions
(assert-true (and true true))
(assert-false (and true false))
(assert-true (or true false))
(assert-false (or false false))

; Function definitions
(assert-true ((fn (n) n) true))
(let
  (id (fn (a) a))
  (do
    (assert-true (id true))
    (assert-equal (id 5) 5)
  )
)

; Core macros
(assert-equal (cond (true 1)) 1)
(assert-equal (cond (false 1) (otherwise 2)) 2)

; List functions
(assert-equal (count nil) 0)
(assert-equal (count '(1 2 3)) 3)
(let (
    +1 (fn (n) (+ n 1))
    l  '(1 2 3)
  )
  (assert-equal (map +1 l) '(2 3 4))
)
(assert-equal (map error ()) ())
(assert-equal (cons "hi" ()) '("hi"))
(assert-equal (cons "hi" '(1)) '("hi" 1))

; Computation tests
(let
  (fib (fn (n)
    (if (<= n 2)
      1
      (+ (fib (- n 2)) (fib (- n 1)))
    )
  ))
  (do
    (assert-equal (fib 5) 5)
    (assert-equal (fib 7) 13)
    (assert-equal (fib -1) 1)
  )
)

; String functions
(assert-equal (drop "hello" 3) "lo")
(assert-equal (drop "hi" 5) "")
(assert-equal (take "hello" 3) "hel")
(assert-equal (take "hi" 5) "hi")
(assert-true (starts-with "hello" ""))
(assert-true (starts-with "hello" "he"))
(assert-false (starts-with "hello" "false"))
(assert-equal (split "1\n2" "\n") '("1" "2"))
(assert-equal (split "" "\n") '(""))
